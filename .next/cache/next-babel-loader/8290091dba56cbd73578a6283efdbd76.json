{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sunny/Documents/Code/Frontend/React/HelloNextJS/pages/index.js\";\n\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\n\nvar PostLink = function PostLink(props) {\n  return __jsx(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 3\n    }\n  }, __jsx(Link, {\n    href: \"/p/[id]\",\n    as: \"/p/\".concat(props.id),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, props.id)));\n};\n\nvar index = function index(props) {\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"jsx-718781015\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, \"The Batman Show \"), __jsx(\"ul\", {\n    className: \"jsx-718781015\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, props.shows.map(function (show) {\n    return __jsx(\"li\", {\n      key: show.id,\n      className: \"jsx-718781015\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }\n    }, __jsx(Link, {\n      href: \"/p/[id]\",\n      as: \"/p/\".concat(show.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      className: \"jsx-718781015\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }\n    }, show.name)));\n  })), __jsx(_JSXStyle, {\n    id: \"718781015\",\n    __self: _this\n  }, \"h1.jsx-718781015{font-family:cursive;color:royal-purple;font-size:40px;text-align:center;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdW5ueS9Eb2N1bWVudHMvQ29kZS9Gcm9udGVuZC9SZWFjdC9IZWxsb05leHRKUy9wYWdlcy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwQm9CLEFBR2lDLG9CQUNELG1CQUNKLGVBQ0csa0JBQ3BCIiwiZmlsZSI6Ii9Vc2Vycy9zdW5ueS9Eb2N1bWVudHMvQ29kZS9Gcm9udGVuZC9SZWFjdC9IZWxsb05leHRKUy9wYWdlcy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMaW5rIGZyb20gJ25leHQvbGluaydcbmltcG9ydCBMYXlvdXQgZnJvbSAnLi4vY29tcG9uZW50cy9MYXlvdXQnXG5pbXBvcnQgZmV0Y2ggZnJvbSAnaXNvbW9ycGhpYy11bmZldGNoJ1xuXG5jb25zdCBQb3N0TGluayA9IChwcm9wcykgPT4gKFxuICA8bGk+XG4gICAgPExpbmsgaHJlZj1cIi9wL1tpZF1cIiBhcz17YC9wLyR7cHJvcHMuaWR9YH0+XG4gICAgICA8YT57cHJvcHMuaWR9PC9hPlxuICAgIDwvTGluaz5cbiAgPC9saT5cbilcblxuY29uc3QgaW5kZXggPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPExheW91dD5cbiAgICAgICAgPGgxPlRoZSBCYXRtYW4gU2hvdyA8L2gxPlxuICAgICAgICA8dWw+XG4gICAgICAgICAge3Byb3BzLnNob3dzLm1hcCgoc2hvdykgPT4gKFxuICAgICAgICAgICAgPGxpIGtleT17c2hvdy5pZH0+XG4gICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvcC9baWRdXCIgYXM9e2AvcC8ke3Nob3cuaWR9YH0+XG4gICAgICAgICAgICAgICAgPGE+e3Nob3cubmFtZX08L2E+XG4gICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvdWw+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICBoMSB7XG4gICAgICAgICAgICBmb250LWZhbWlseTogY3Vyc2l2ZTtcbiAgICAgICAgICAgIGNvbG9yOiByb3lhbC1wdXJwbGU7XG4gICAgICAgICAgICBmb250LXNpemU6IDQwcHg7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICA8L0xheW91dD5cbiAgICA8L2Rpdj5cbiAgKVxufVxuaW5kZXguZ2V0SW5pdGlhbFByb3BzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkudHZtYXplLmNvbS9zZWFyY2gvc2hvd3M/cT1iYXRtYW4nKVxuICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKVxuICBjb25zb2xlLmxvZyhgU2hvdyBkYXRhIGZldGNoZWQuIENvdW50OiAke2RhdGEubGVuZ3RofWApXG5cbiAgcmV0dXJuIHtcbiAgICBzaG93czogZGF0YS5tYXAoKGVudHJ5KSA9PiBlbnRyeS5zaG93KVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4XG4iXX0= */\\n/*@ sourceURL=/Users/sunny/Documents/Code/Frontend/React/HelloNextJS/pages/index.js */\")));\n};\n\nindex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=batman'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          return _context.abrupt(\"return\", {\n            shows: data.map(function (entry) {\n              return entry.show;\n            })\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default index;","map":{"version":3,"sources":["/Users/sunny/Documents/Code/Frontend/React/HelloNextJS/pages/index.js"],"names":["Link","Layout","fetch","PostLink","props","id","index","shows","map","show","name","getInitialProps","res","json","data","console","log","length","entry"],"mappings":";;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,SAAX;AAAqB,IAAA,EAAE,eAAQA,KAAK,CAACC,EAAd,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,KAAK,CAACC,EAAV,CADF,CADF,CADe;AAAA,CAAjB;;AAQA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACF,KAAD,EAAW;AACvB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACG,KAAN,CAAYC,GAAZ,CAAgB,UAACC,IAAD;AAAA,WACf;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACJ,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,EAAE,eAAQI,IAAI,CAACJ,EAAb,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAII,IAAI,CAACC,IAAT,CADF,CADF,CADe;AAAA,GAAhB,CADH,CAFF;AAAA;AAAA;AAAA,gmEADF,CADF;AAwBD,CAzBD;;AA0BAJ,KAAK,CAACK,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACJT,KAAK,CAAC,8CAAD,CADD;;AAAA;AAChBU,UAAAA,GADgB;AAAA;AAAA,2CAEHA,GAAG,CAACC,IAAJ,EAFG;;AAAA;AAEhBC,UAAAA,IAFgB;AAGtBC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAACG,MAA9C;AAHsB,2CAKf;AACLV,YAAAA,KAAK,EAAEO,IAAI,CAACN,GAAL,CAAS,UAACU,KAAD;AAAA,qBAAWA,KAAK,CAACT,IAAjB;AAAA,aAAT;AADF,WALe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAUA,eAAeH,KAAf","sourcesContent":["import Link from 'next/link'\nimport Layout from '../components/Layout'\nimport fetch from 'isomorphic-unfetch'\n\nconst PostLink = (props) => (\n  <li>\n    <Link href=\"/p/[id]\" as={`/p/${props.id}`}>\n      <a>{props.id}</a>\n    </Link>\n  </li>\n)\n\nconst index = (props) => {\n  return (\n    <div>\n      <Layout>\n        <h1>The Batman Show </h1>\n        <ul>\n          {props.shows.map((show) => (\n            <li key={show.id}>\n              <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n                <a>{show.name}</a>\n              </Link>\n            </li>\n          ))}\n        </ul>\n        <style jsx>{`\n          h1 {\n            font-family: cursive;\n            color: royal-purple;\n            font-size: 40px;\n            text-align: center;\n          }\n        `}</style>\n      </Layout>\n    </div>\n  )\n}\nindex.getInitialProps = async function () {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman')\n  const data = await res.json()\n  console.log(`Show data fetched. Count: ${data.length}`)\n\n  return {\n    shows: data.map((entry) => entry.show)\n  }\n}\n\nexport default index\n"]},"metadata":{},"sourceType":"module"}